<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup Condition="'$(Configuration)' == ''">
        <Configuration>Release</Configuration>
    </PropertyGroup>
    <PropertyGroup>
        <CppPlatform Condition="'$(Platform)' == 'x64'">x64</CppPlatform>
        <CppPlatform Condition="'$(Platform)' == 'x86' or '$(Platform)' == 'Win32'">Win32</CppPlatform>

        <UwpPlatform Condition="'$(Platform)' == 'x64'">x64</UwpPlatform>
        <UwpPlatform Condition="'$(Platform)' == 'x86' or '$(Platform)' == 'Win32'">x86</UwpPlatform>

        <DefaultPlatformToolset Condition="'$(VisualStudioVersion)' == '12.0'">v120</DefaultPlatformToolset>
        <DefaultPlatformToolset Condition="'$(VisualStudioVersion)' == '14.0'">v140</DefaultPlatformToolset>
        <DefaultPlatformToolset Condition="'$(VisualStudioVersion)' == '15.0'">v141</DefaultPlatformToolset>
        <DefaultPlatformToolset Condition="'$(VisualStudioVersion)' == '16.0'">v141</DefaultPlatformToolset>
    </PropertyGroup>

    <Import Project="$(MSBuildThisFileDirectory)\..\..\config\icebuilder.props" />

    <Import Project="$(MSBuildThisFileDirectory)\..\..\config\ice.common.targets" />

    <Target Name="RemovePackages">
      <Exec Command="rmdir /s /q $(MSBuildThisFileDirectory)packages" Condition="Exists('$(MSBuildThisFileDirectory)packages')" />
    </Target>

    <!-- NET Standard on Windows requires Visual Studio 2017 or Visual Studio 2019 -->
    <Choose>
        <When Condition="'$(VisualStudioVersion)' == '15.0' or '$(VisualStudioVersion)' == '16.0' or '$(OS)' != 'Windows_NT'">
            <PropertyGroup>
                <BuildNetStandardTargets>true</BuildNetStandardTargets>
            </PropertyGroup>
        </When>
        <Otherwise>
            <PropertyGroup>
                <BuildNetStandardTargets>false</BuildNetStandardTargets>
            </PropertyGroup>
        </Otherwise>
    </Choose>

    <!-- Targets required to build Slice compilers -->
    <Choose>
        <When Condition="'$(MSBuildToolsVersion)' == '12.0' or '$(OS)' != 'Windows_NT'">
            <ItemGroup>
                <SliceCompilers Include="slice2cs;slice2html"/>
            </ItemGroup>
        </When>

        <Otherwise>
            <ItemGroup>
                <SliceCompilers Include="c++98\slice2cs;c++98\slice2html"/>
            </ItemGroup>
        </Otherwise>
    </Choose>

    <Target Name="SliceCompilers" Condition="'$(ICE_BIN_DIST)' != 'all'">
        <MSBuild Projects="$(MSBuildThisFileDirectory)..\..\cpp\msbuild\ice.proj"
                 Targets="NuGetRestore"
                 BuildInParallel="true"
                 Condition="'$(OS)' == 'Windows_NT'"/>

        <MSBuild Projects="$(MSBuildThisFileDirectory)..\..\cpp\msbuild\ice.$(DefaultPlatformToolset).sln"
                 Targets="@(SliceCompilers)"
                 BuildInParallel="true"
                 Properties="Platform=$(CppPlatform);Configuration=$(Configuration)"
                 Condition="'$(OS)' == 'Windows_NT'"/>

        <Exec Command="make @(SliceCompilers->'%(Identity)', ' ')"
              WorkingDirectory="$(MSBuildThisFileDirectory)..\..\cpp"
              Condition="'$(OS)' != 'Windows_NT'"/>
    </Target>

    <ItemGroup>
        <!-- .NET 4.5 Solution files -->
        <Net45DistSolution Include="ice.net45.sln">
          <Properties>Configuration=$(Configuration);Platform=Any CPU;CppPlatform=$(CppPlatform)</Properties>
        </Net45DistSolution>

        <Net45TestSolution Include="ice.net45.test.sln">
          <Properties>Configuration=$(Configuration);Platform=Any CPU;CppPlatform=$(CppPlatform)</Properties>
        </Net45TestSolution>

        <!-- .NET Standard Solution files -->
        <NetStandardDistSolution Include="ice.netstandard2.0.sln">
          <Properties>Configuration=$(Configuration);Platform=Any CPU;CppPlatform=$(CppPlatform)</Properties>
        </NetStandardDistSolution>

        <NetStandardTestSolution Include="ice.netstandard2.0.test.sln">
          <Properties>Configuration=$(Configuration);Platform=Any CPU;CppPlatform=$(CppPlatform)</Properties>
        </NetStandardTestSolution>
    </ItemGroup>

    <!-- NET 4.5 Targets -->
    <Target Name="NuGetRestoreNet45Dist"
            DependsOnTargets="GetNuget"
            Condition="'$(ICE_BIN_DIST)' != 'all' and '$(OS)' == 'Windows_NT'">
        <Exec Command="$(NuGetExe) restore @(Net45DistSolution)"/>
    </Target>

    <Target Name="BuildNet45Dist"
            DependsOnTargets="SliceCompilers;NuGetRestoreNet45"
            Condition="'$(ICE_BIN_DIST)' != 'all' and '$(OS)' == 'Windows_NT'">

        <MSBuild Projects="@(Net45DistSolution)"
                 BuildInParallel="true"
                 Properties="%(Properties)"/>

    </Target>

    <Target Name="CleanNet45Dist"
            Condition="'$(ICE_BIN_DIST)' != 'all' and '$(OS)' == 'Windows_NT'">

        <MSBuild Projects="@(Net45DistSolution)"
                 BuildInParallel="true"
                 Properties="%(Properties)"
                 Targets="Clean" />

    </Target>

    <Target Name="NuGetRestoreNet45"
            DependsOnTargets="GetNuget;NuGetRestoreNet45Dist"
            Condition="'$(OS)' == 'Windows_NT'">
        <!-- The builder package should be already restored by dist build and we do not want to restore
             the zeroc.ice.net packages if we are not building with the binary dist -->
        <Exec Command="$(NuGetExe) restore @(Net45TestSolution)" Condition="'$(ICE_BIN_DIST)' == 'all'" />
    </Target>

    <Target Name="BuildNet45"
            DependsOnTargets="BuildNet45Dist;NuGetRestoreNet45"
            Condition="'$(OS)' == 'Windows_NT'">

        <MSBuild Projects="@(Net45TestSolution)"
                 BuildInParallel="true"
                 Properties="%(Properties)"/>

    </Target>

    <Target Name="CleanNet45"
            DependsOnTargets="CleanNet45Dist"
            Condition="'$(OS)' == 'Windows_NT'">

        <MSBuild Projects="@(Net45TestSolution)"
                 BuildInParallel="true"
                 Properties="%(Properties)"
                 Targets="Clean" />

    </Target>

    <!-- NET Standard Targets -->
    <Target Name="NuGetRestoreNetStandardDist"
            Condition="'$(ICE_BIN_DIST)' != 'all' and '$(BuildNetStandardTargets)' == 'true'">
        <MSBuild Projects="@(NetStandardDistSolution)"
                 BuildInParallel="true"
                 Properties="%(Properties)"
                 Targets="Restore"/>
    </Target>

    <Target Name="BuildNetStandardDist"
            DependsOnTargets="SliceCompilers;NuGetRestoreNetStandardDist"
            Condition="'$(ICE_BIN_DIST)' != 'all' and '$(BuildNetStandardTargets)' == 'true'">

        <MSBuild Projects="@(NetStandardDistSolution)"
                 BuildInParallel="true"
                 Properties="%(Properties)"/>

    </Target>

    <Target Name="CleanNetStandardDist"
            Condition="'$(ICE_BIN_DIST)' != 'all' and '$(BuildNetStandardTargets)' == 'true'">

        <MSBuild Projects="@(NetStandardDistSolution)"
                 BuildInParallel="true"
                 Properties="%(Properties)"
                 Targets="Clean" />

    </Target>

    <Target Name="NuGetRestoreNetStandard"
            DependsOnTargets="NuGetRestoreNetStandardDist"
            Condition="'$(BuildNetStandardTargets)' == 'true'">
        <MSBuild Projects="@(NetStandardTestSolution)"
                 BuildInParallel="true"
                 Properties="%(Properties)"
                 Targets="Restore"/>
    </Target>

    <Target Name="BuildNetStandard"
            DependsOnTargets="BuildNetStandardDist;NuGetRestoreNetStandard"
            Condition="'$(BuildNetStandardTargets)' == 'true'">

        <MSBuild Projects="@(NetStandardTestSolution)"
                 BuildInParallel="true"
                 Properties="%(Properties)"/>

    </Target>

    <Target Name="CleanNetStandard"
            DependsOnTargets="CleanNetStandardDist"
            Condition="'$(BuildNetStandardTargets)' == 'true'">

        <MSBuild Projects="@(NetStandardTestSolution)"
                 BuildInParallel="true"
                 Properties="%(Properties)"
                 Targets="Clean" />

    </Target>

    <!-- Meta targets -->

    <Target Name="BuildDist" DependsOnTargets="BuildNetStandardDist;BuildNet45Dist">
    </Target>

    <Target Name="CleanDist" DependsOnTargets="CleanNetStandardDist;CleanNet45Dist">
    </Target>

    <Target Name="NuGetRestore" DependsOnTargets="NuGetRestoreNetStandard;NuGetRestoreNet45">
    </Target>

    <Target Name="Build" DependsOnTargets="BuildNetStandard;BuildNet45">
    </Target>

    <Target Name="Clean" DependsOnTargets="CleanNetStandard;CleanNet45">
    </Target>

    <Import Project="$(MSBuildThisFileDirectory)ice.common.targets" />

    <!-- Packaging is only supported on Windows -->
    <Target Name="WindowsNuGetPack" DependsOnTargets="BuildDist" Condition="'$(OS)' == 'Windows_NT'">
        <RemoveDir Directories="zeroc.ice.net" />

        <MSBuild Projects="$(MSBuildThisFileDirectory)..\src\IceBox\msbuild\icebox\netstandard2.0\icebox.csproj"
                 Properties="Configuration=$(Configuration);Platform=Any CPU"
                 Targets="Publish"
                 Condition="'$(BuildNetStandardTargets)' == 'true'"/>

        <MSBuild Projects="ice.nuget.targets"
                 Properties="PackageDirectory=zeroc.ice.net;BuildNetStandardTargets=$(BuildNetStandardTargets);
                             CppPlatform=$(CppPlatform);Configuration=$(Configuration)"/>

        <Copy SourceFiles="zeroc.ice.net.nuspec"
              DestinationFolder="zeroc.ice.net" />

        <Copy SourceFiles="$(MSBuildThisFileDirectory)THIRD_PARTY_LICENSE.txt"
              DestinationFiles="zeroc.ice.net\THIRD_PARTY_LICENSE.txt" />

        <Copy SourceFiles="$(MSBuildThisFileDirectory)..\..\ICE_LICENSE"
              DestinationFiles="zeroc.ice.net\ICE_LICENSE.txt" />

        <Copy SourceFiles="$(MSBuildThisFileDirectory)..\..\LICENSE"
              DestinationFiles="zeroc.ice.net\LICENSE.txt" />

        <!-- Generate iceboxnet.exe.config with the correct assembly pulbic key token and assembly paths -->
        <GetPublicKeyToken AssemblyFile="$(MSBuildThisFileDirectory)..\lib\net45\Ice.dll">
            <Output TaskParameter="PublicKeyToken" PropertyName="PublicKeyToken"/>
        </GetPublicKeyToken>

        <WriteFileWithReplacements InputFile="$(MSBuildThisFileDirectory)iceboxnet.exe.config.release"
                                   OutputFile="$(MSBuildThisFileDirectory)zeroc.ice.net\tools\net45\iceboxnet.exe.config"
                                   Tokens="@PublicKeyToken@;@AssemblyDir@"
                                   Replacements="$(PublicKeyToken);..\..\lib\net45"
                                   Condition="'$(PublicKeyToken)' != ''"/>

        <Copy SourceFiles="$(MSBuildThisFileDirectory)iceboxnet.exe.config.dev"
              DestinationFiles="$(MSBuildThisFileDirectory)zeroc.ice.net\tools\net45\iceboxnet.exe.config"
              Condition="'$(PublicKeyToken)' == ''"/>

        <!-- Copy bzip2 native dll next to iceboxnet assemblies -->
        <Copy SourceFiles="$(MSBuildThisFileDirectory)..\..\cpp\msbuild\packages\bzip2.v140.1.0.6.10\build\native\bin\x64\MT-Release\bzip2.dll;
                           $(MSBuildThisFileDirectory)..\..\cpp\msbuild\packages\bzip2.v140.1.0.6.10\build\native\bin\x64\MT-Release\bzip2.pdb"
              DestinationFolder="$(MSBuildThisFileDirectory)zeroc.ice.net\tools\net45"/>

        <Copy SourceFiles="$(MSBuildThisFileDirectory)..\..\cpp\msbuild\packages\bzip2.v140.1.0.6.10\build\native\bin\x64\MT-Release\bzip2.dll;
                           $(MSBuildThisFileDirectory)..\..\cpp\msbuild\packages\bzip2.v140.1.0.6.10\build\native\bin\x64\MT-Release\bzip2.pdb"
              DestinationFolder="$(MSBuildThisFileDirectory)zeroc.ice.net\tools\netcoreapp2.1"
              Condition="'$(BuildNetStandardTargets)' == 'true'"/>

        <Copy SourceFiles="zeroc.ice.net.props"
              DestinationFiles="zeroc.ice.net\build\zeroc.ice.net.props"/>

        <Exec Command="$(NuGetExe) pack -NoPackageAnalysis -NonInteractive"
              WorkingDirectory="zeroc.ice.net"/>
    </Target>

    <Target Name="UnixNuGetPack" DependsOnTargets="BuildDist" Condition="'$(OS)' != 'Windows_NT'">
        <RemoveDir Directories="zeroc.ice.net" />

        <MSBuild Projects="$(MSBuildThisFileDirectory)..\src\IceBox\msbuild\icebox\netstandard2.0\icebox.csproj"
                 Properties="Configuration=$(Configuration);Platform=Any CPU"
                 Targets="Publish"/>
        <MSBuild Projects="zeroc.ice.net.csproj" Targets="Restore;Pack"/>
        <RemoveDir Directories="obj"/>
        <Delete Files="zeroc.ice.net\zeroc.ice.net.deps.json;zeroc.ice.net\zeroc.ice.net.dll;zeroc.ice.net\zeroc.ice.net.pdb"/>
    </Target>

    <Target Name="NuGetPack"
            DependsOnTargets="WindowsNuGetPack;UnixNuGetPack">
    </Target>

    <!-- UWP Xamarin Builds -->
    <Target Name="UWPXamarinBuild" DependsOnTargets="BuildNetStandardDist" Condition="'$(OS)' == 'Windows_NT'">
        <Exec Command="$(NuGetExe) restore $(MSBuildThisFileDirectory)ice.xamarin.test.sln" />
        <MSBuild Projects="$(MSBuildThisFileDirectory)..\test\xamarin\controller.UWP\controller.UWP.csproj"
                 Properties="Configuration=$(Configuration);Platform=$(UWPPlatform)"/>
    </Target>

    <!-- Android Xamarin Builds -->
    <Target Name="AndroidXamarinBuildOnWindows" DependsOnTargets="BuildNetStandardDist" Condition="'$(OS)' == 'Windows_NT'">
        <Exec Command="$(NuGetExe) restore $(MSBuildThisFileDirectory)ice.xamarin.test.sln" />
        <MSBuild Projects="$(MSBuildThisFileDirectory)..\test\xamarin\controller.Android\controller.Android.csproj"
                 Properties="Configuration=$(Configuration);Platform=AnyCPU"
                 Targets="SignAndroidPackage"/>
    </Target>

    <Target Name="AndroidXamarinBuildOnMac" DependsOnTargets="" Condition="'$(OS)' == 'Unix'">
        <!-- We use exec to build the distribution instead of adding it to the DependsOnTargets as we have to use
             "dotnet msbuid" to build the distribution and "msbuild" from Visual Studio to build the test controller -->
        <Exec Command="dotnet msbuild $(MSBuildThisFileDirectory)ice.proj /t:BuildDist" />
        <Exec Command="nuget restore $(MSBuildThisFileDirectory)ice.xamarin.test.sln" />
        <MSBuild Projects="$(MSBuildThisFileDirectory)..\test\xamarin\controller.Android\controller.Android.csproj"
                 Properties="Configuration=$(Configuration);Platform=AnyCPU"
                 Targets="SignAndroidPackage"/>
    </Target>

    <Target Name="AndroidXamarinBuild" DependsOnTargets="AndroidXamarinBuildOnWindows;AndroidXamarinBuildOnMac"/>

    <!-- iOS Xamarin Builds -->
    <Target Name="iOSXamarinBuild" Condition="'$(OS)' == 'Unix'">
        <!-- We use exec to build the distribution instead of adding it to the DependsOnTargets as we have to use
             "dotnet msbuid" to build the distribution and "msbuild" from Visual Studio to build the test controller -->
        <Exec Command="dotnet msbuild $(MSBuildThisFileDirectory)ice.proj /t:BuildDist" />
        <Exec Command="nuget restore $(MSBuildThisFileDirectory)ice.xamarin.test.sln" />
        <MSBuild Projects="$(MSBuildThisFileDirectory)..\test\xamarin\controller.iOS\controller.iOS.csproj"
                 Properties="Configuration=$(Configuration)"/>
    </Target>

</Project>
